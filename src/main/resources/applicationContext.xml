<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"
       default-lazy-init="false">
    <!-- 注解装载 否则注解配置不上-->
    <context:component-scan base-package="base"/>
    <context:component-scan base-package="controler"/>
    <context:component-scan base-package="service"/>
    <context:component-scan base-package="dao"/>
    <!--<context:component-scan base-package="com" />-->

        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
        <!--<context:include-filter type="annotation" expression="org.springframework.transaction.annotation.Transactional"/>-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->
    <!--<context:component-scan com.base-package="com.controller.*" annotation-config="true"></context:component-scan>-->
    <context:annotation-config/>
    <!-- aop读取-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!-- 读取配置文件-->
    <!--<context:property-placeholder  ignore-resource-not-found="false" location="classpath*:db.properties"/>-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:db.properties</value>
            </list>

        </property>
    </bean>
    <!-- 数据源配置, 使用 c3p0 数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"  destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <!--&lt;!&ndash;<property name="dataSourceName" value="${jdbc.driver}" />&ndash;&gt;-->
        <!--<property name="driverClass" >-->
            <!--<value>${jdbc.driver}</value>-->
        <!--</property>-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 &ndash;&gt;-->
        <!--<property name="initialSize" value="${jdbc.pool.initialSize}" />-->
        <!--&lt;!&ndash; 最小连接池数量 &ndash;&gt;-->
        <!--<property name="minIdle" value="${jdbc.pool.maxIdle}" />-->
        <!--&lt;!&ndash; 最大连接池数量 &ndash;&gt;-->
        <!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->

        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

        <!--&lt;!&ndash;<property name="timeBetweenLogStatsMillis" value="300000" />&ndash;&gt;-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
        <!--&lt;!&ndash; 检查连接空间是否足够 &ndash;&gt;-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--&lt;!&ndash; 用来检测连接是否有效的sql，要求是一个查询语句 &ndash;&gt;-->
        <!--<property name="validationQuery" value="SELECT 1" />-->
        <!--&lt;!&ndash; 申请连接时执行validationQuery检测连接是否有效 &ndash;&gt;-->
        <!--<property name="testOnBorrow" value="true" />-->
        <!--&lt;!&ndash; 归还连接时执行validationQuery检测连接是否有效 &ndash;&gt;-->
        <!--<property name="testOnReturn" value="true" />-->

        <!--<property name="removeAbandoned" value="false" />-->
        <!--<property name="removeAbandonedTimeout" value="1800" /> &lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="true" /> &lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，
        常用的插件有：
        监控统计用的filter:stat
        日志用的filter:log4j
         防御sql注入的filter:wall -->
        <!--<property name="filters" value="stat" />-->
        <property name="driverClass" value="${driver}"></property>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialPoolSize" value="3"/>
        <property name="maxPoolSize" value="6"/>
        <property name="maxStatements" value="100"/>
        <property name="acquireIncrement" value="2"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true" />

    <bean id="jdbctemplate" class="org.springframework.jdbc.core.JdbcTemplate">
                 <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
        <property name="mapperLocations" >
            <list>
                <value>classpath*:mapper/*.xml</value>
            </list>
        </property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="dao.*" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
     <!--mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>






    <!--<bean id="after" class="aop.AfterAop"/>-->


    <!--<bean id="springContextUtil" class="com.service.SpringContextUtil">-->

    <!--</bean>-->
    <!-- -->
    <tx:advice id="TestAdvice" transaction-manager="transactionManager">

        <tx:attributes>

            <tx:method name="save*" propagation="REQUIRED" />

            <tx:method name="del*" propagation="REQUIRED"/>

            <tx:method name="update*" propagation="REQUIRED"/>

            <tx:method name="add*" propagation="REQUIRED"/>

            <tx:method name="find*" propagation="REQUIRED"/>

            <tx:method name="get*" propagation="REQUIRED"/>

            <tx:method name="apply*" propagation="REQUIRED"/>

        </tx:attributes>
    </tx:advice>



</beans>